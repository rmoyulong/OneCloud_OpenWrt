#云编译公用核心
name: 玩客云公用核心

on:
  #公用核心标识
  workflow_call:
    inputs:
      OWRT_TARGET:
        required: true
        type: string
      OWRT_THEME:
        required: true
        type: string
      OWRT_NAME:
        required: true
        type: string
      OWRT_URL:
        required: true
        type: string
      OWRT_PW:
        required: true
        type: string
      OWRT_IP:
        required: true
        type: string
      OWRT_CFG:
        required: true
        type: string
      OWRT_BRANCH:
        required: true
        type: string
      OWRT_TYPE:
        required: true
        type: string
      OWRT_LINUX:
        required: true
        type: string
      OWRT_FILES:
        required: true
        type: string
      DIY_P1_SH:
        required: true
        type: string
      DIY_P2_SH:
        required: true
        type: string
      OWRT_DOCKER:
        required: true
        type: string
        
env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  OWRT_TARGET: ${{inputs.OWRT_TARGET}}
  OWRT_THEME: ${{inputs.OWRT_THEME}}
  OWRT_NAME: ${{inputs.OWRT_NAME}}
  OWRT_URL: ${{inputs.OWRT_URL}}
  OWRT_PW: ${{inputs.OWRT_PW}}
  OWRT_IP: ${{inputs.OWRT_IP}}
  OWRT_CFG: ${{inputs.OWRT_CFG}}
  OWRT_BRANCH: ${{inputs.OWRT_BRANCH}}
  OWRT_TYPE: ${{inputs.OWRT_TYPE}}
  OWRT_LINUX: ${{inputs.OWRT_LINUX}}
  OWRT_FILES: ${{inputs.OWRT_FILES}}
  DIY_P1_SH: ${{inputs.DIY_P1_SH}}
  DIY_P2_SH: ${{inputs.DIY_P2_SH}}
  OWRT_DOCKER: ${{inputs.OWRT_DOCKER}}
  FEEDS_CONF: feeds.conf.default
  TZ: Asia/Shanghai
  #USE_CACHEWRTBUILD: true
  
jobs:
  owrt_core_OneCloud:
    runs-on: ubuntu-latest
    
    steps:
    
      - name: 清理服务器空间(Ubuntu)
        uses: rmoyulong/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: true

          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
        
      - name: 项目检查
        uses: actions/checkout@main

      - name: 检查分配的服务器性能
        run: |
          echo "警告⚠"
          echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
          echo -e "已知CPU型号（降序）：7763，8370C，8272CL，8171M，E5-2673 \n"
          echo "--------------------------CPU信息--------------------------"
          echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
          echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
          echo "--------------------------内存信息--------------------------"
          echo "已安装内存详细信息："
          echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
          echo "--------------------------硬盘信息--------------------------"
          echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT        
          
      - name: 初始化编译环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install $(curl -fsSL https://raw.githubusercontent.com/rmoyulong/OneCloud_OpenWrt/master/Ubuntu-2204.txt)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          echo "status=success" >> ${GITHUB_OUTPUT}
          df -Th         

      - name: 初始化变量
        run: |
          export OWRT_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
          export OWRT_SOURCE=$(echo $OWRT_URL | cut -d '/' -f 5-)
          #export OWRT_TYPE="cortex-a53"
          
          echo "OWRT_SOURCE=$OWRT_SOURCE" >> $GITHUB_ENV
          echo "OWRT_TARGET=$OWRT_TARGET" >> $GITHUB_ENV
          echo "OWRT_DATE=$OWRT_DATE" >> $GITHUB_ENV
          echo "OWRT_TYPE=$OWRT_TYPE" >> $GITHUB_ENV
          echo "OWRT_PW=$OWRT_PW" >> $GITHUB_ENV
          echo "OWRT_IP=$OWRT_IP" >> $GITHUB_ENV
          echo "OWRT_LINUX=$OWRT_LINUX" >> $GITHUB_ENV
          echo "OWRT_FILES=$OWRT_FILES" >> $GITHUB_ENV
          echo "DIY_P1_SH=$DIY_P1_SH" >> $GITHUB_ENV
          echo "DIY_P2_SH=$DIY_P2_SH" >> $GITHUB_ENV
          echo "OWRT_CFG=$OWRT_CFG" >> $GITHUB_ENV
          echo "OWRT_DOCKER=$OWRT_DOCKER" >> $GITHUB_ENV
          echo "FEEDS_CONF=$FEEDS_CONF" >> $GITHUB_ENV

      - name: 克隆源码库
        working-directory: /workdir
        run: |
          # Set up compilation source code
          if [[ "${{ inputs.OWRT_URL }}" == *"openwrt"* ]]; then
              REPO_URL="https://github.com/openwrt/openwrt"
              REPO_BRANCH="main"
              TAGS_NAME="official"
          elif [[ "${{ inputs.OWRT_URL }}" == *"lede"* ]]; then
              REPO_URL="https://github.com/coolsnowwolf/lede"
              REPO_BRANCH="master"
              TAGS_NAME="lede"
          elif [[ "${{ inputs.OWRT_URL }}" == *"immortalwrt"* ]]; then
              REPO_URL="https://github.com/immortalwrt/immortalwrt"
              REPO_BRANCH="master"
              TAGS_NAME="immortalwrt"
          else
              echo "Unknown source code repository."
              exit 1
          fi
          
          df -hT $PWD
          git clone -q --single-branch --depth=1 --branch=${REPO_BRANCH} ${REPO_URL} openwrt          
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
          
      - name: 检查脚本
        run: |
          cd ./sh
          
          dos2unix ./*.sh
          chmod +x ./*.sh

      - name: 设置订阅源
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          
          cd openwrt
          if [[ $REPO_URL == *"immortalwrt"* ]]; then
            rm -rf target/linux/amlogic
            mv $GITHUB_WORKSPACE/lede6.6/target/linux/meson target/linux/meson
            chmod -Rf 755 target/linux/meson
          fi
          
          $GITHUB_WORKSPACE/$DIY_P1_SH
          #echo 'src-git kiddin9 https://github.com/kiddin9/openwrt-packages' >> feeds.conf.default
          echo "COMMIT_HASH=$(git rev-parse HEAD)" >> $GITHUB_ENV
        

      - name: 启动缓存[第二次起生效]
        uses: rmoyulong/cachewrtbuild@main
        with:
          ccache: 'true'
          prefix: ${{ github.workspace }}/openwrt
          mixkey: ${{ env.OWRT_URL }}/tree/${{ env.OWRT_BRANCH }}?device=${{ env.OWRT_CFG }} 

      - name: 更新安装订阅源
        working-directory: ./openwrt
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name:  加载自定义配置
        working-directory: ./openwrt
        run: |         
          rm -rf ./tmp* ./.config*
          [ -e $GITHUB_WORKSPACE/Config/$OWRT_CFG ] && mv $GITHUB_WORKSPACE/Config/$OWRT_CFG .config
          cp -rf $GITHUB_WORKSPACE/ax6/banner package/base-files/files/etc/banner
          $GITHUB_WORKSPACE/sh/$DIY_P2_SH
          
          #docker版去掉解除网易音乐限制插件
          if [[ "${{ inputs.OWRT_TYPE }}" == *"OneCloud-docker"* ]]; then
            echo -e 'CONFIG_PACKAGE_luci-app-unblockmusic=n\n' >> .config
            echo -e 'CONFIG_PACKAGE_luci-app-unblockneteasemusic=n\n' >> .config
          fi
          
          #删除冲突的插件 
          #rm -rf feeds/kenzok8/{base-files,dnsmasq,firewall*,fullconenat,libnftnl,nftables,ppp,opkg,ucl,upx,vsftpd-alt,miniupnpd-iptables,wireless-regdb}
          $GITHUB_WORKSPACE/sh/remove.sh
               
      - name: 自定义IMAGS格式 - meson8b cortex-a5+vfpv4
        run: |
          dos2unix $GITHUB_WORKSPACE/$OWRT_FILES/etc/*.sh
          dos2unix $GITHUB_WORKSPACE/$OWRT_FILES/etc/rc.*
          chmod -Rf 755 $GITHUB_WORKSPACE/$OWRT_FILES/etc/*.sh
          chmod -Rf 755 $GITHUB_WORKSPACE/$OWRT_FILES/etc/rc.*
          
          cd openwrt
          mv $GITHUB_WORKSPACE/$OWRT_FILES files
          
          #web控制台去掉443监听补丁
          if [[ "${{ inputs.OWRT_TYPE }}" == *"OneCloud-docker"* ]]; then
            mv $GITHUB_WORKSPACE/ax6/uhttpd ./files/etc/config
          fi
          
          make defconfig
        
      - name: 下载编译环境
        working-directory: ./openwrt
        run: |
          make download -j$(nproc)
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: 编译固件
        working-directory: ./openwrt
        run: |
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV 

      #- name: 上传 bin 目录
        #uses: actions/upload-artifact@main
        #with:
          #name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          #path: openwrt/bin
        
      #- name: 整理固件
        #id: assemble_artifact
        #run: |
          #rm -rf ./ARM_Out
          #mkdir -p ./ARM_Out/
        
          #getmd5()
          #{
          #md5sum=`md5sum $1`
          #md5=`echo ${md5sum% *}`
          #md5=`echo ${md5:0:10}`
          #}
        
          #rom=openwrt/bin/targets/meson/meson8b/openwrt-*.img.gz
          #getmd5 $rom
                
          #cp -a $rom ./ARM_Out/openwrt-$(date +%Y%m%d)_${md5}.img.gz
          
          #if [[ $OWRT_TYPE == *"OneCloud-docker"* ]]; then
            #rom1=openwrt/bin/targets/meson/meson8b/*.tar
            #getmd5 $rom1
                
            #cp -a $rom1 ./ARM_Out/immortalwrt-meson-meson8b-thunder-onecloud-rootfs.tar        
          #fi
          
          #cp -a openwrt/.config ./ARM_Out/config.txt
          
      - name: 整理固件
        id: organize
        run: |
          cd openwrt
          cp -rf .config ./bin/targets/meson/meson8b/config.txt
          cd bin/targets/meson/meson8b
          rm -rf ./packages          
          
          if [[ $REPO_URL == *"immortalwrt"* ]]; then
            gzip *.tar
          fi
          
          #获得当前目录的路径信息
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "::set-output name=status::success"
          
          #信息
          export OWRT_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
          export OWRT_SOURCE=$(echo $REPO_URL | cut -d '/' -f 5-)
          echo "OWRT_SOURCE=$OWRT_SOURCE" >> $GITHUB_ENV
          echo "OWRT_DATE=$OWRT_DATE" >> $GITHUB_ENV


      - name: 生成标记和标签
        id: generate_name
        run: |
          time=$(date +%Y%m%d%H%M%S)
          release_tag="$time"
          release_name="meson8b-$(date +%Y%m%d)"
          echo "release_name=$release_name" >> $GITHUB_OUTPUT
          echo "release_tag=$release_tag" >> $GITHUB_OUTPUT
          if [[ $OWRT_CFG == *"arm7_mini.config"* ]]; then
            echo "OWRT_TYPE=[迷你版]" >> $GITHUB_ENV
          elif [[ $OWRT_CFG == *"tiny.config"* ]]; then
            echo "OWRT_TYPE=[hub docker迷你]" >> $GITHUB_ENV
            echo "OWRT_TAGS=Mini" >> $GITHUB_ENV
          elif [[ $OWRT_CFG == *"arm7.config"* ]]; then
            echo "OWRT_TYPE=[全版]" >> $GITHUB_ENV            
          else
            echo "OWRT_TYPE=[hub docker正常]" >> $GITHUB_ENV
            echo "OWRT_TAGS=Latest" >> $GITHUB_ENV
          fi
          
      - name: 上传IMAGES[Usb固件或直刷版]
        uses: rmoyulong/action-gh-release@master
        if: env.OWRT_DOCKER == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: OpenWrt_${{ env.OWRT_SOURCE }}_${{ env.OWRT_DATE }}
          files: ${{ env.FIRMWARE }}/*
          body: |
            玩客云${{ env.OWRT_TYPE }}[meson6.6]固件！首次使用rufus写盘启动！
            源码：${{env.OWRT_SOURCE}}
            密码：password
            地址：${{env.OWRT_IP}}          

      - name: 上传IMAGES[Hub Docker版]
        uses: rmoyulong/action-gh-release@master
        if: env.OWRT_DOCKER == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: Docker_${{ env.OWRT_TAGS }}
          files: ${{ env.FIRMWARE }}/*
          body: |
            玩客云${{ env.OWRT_TYPE }}[meson6.6]固件！首次使用rufus写盘启动！
            源码：${{env.OWRT_SOURCE}}
            密码：password
            地址：${{env.OWRT_IP}} 
            
      - name: 清理Releases
        uses: rmoyulong/delete-older-releases@master
        with:
          keep_latest: 12
          delete_tags: true

      - name: 清理Workflows
        uses: rmoyulong/delete-workflow-runs@main
        with:
          retain_days: 0
          keep_minimum_runs: 1
